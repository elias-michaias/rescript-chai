// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cmd from "../lib/Cmd.res.js";
import * as Sub from "../lib/Sub.res.js";
import * as Chai from "../lib/Chai.res.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";
import * as JsxRuntime from "react/jsx-runtime";

function update(model, msg) {
  if (typeof msg !== "object") {
    if (msg === "Increment") {
      return [
              {
                count: model.count + 1 | 0,
                title: model.title
              },
              "NoOp"
            ];
    } else {
      return [
              model,
              {
                TAG: "StorageGet",
                _0: {
                  key: "count",
                  cons: (function (r) {
                      return {
                              TAG: "Set",
                              _0: Core__Option.map(r, Caml_format.int_of_string)
                            };
                    })
                }
              }
            ];
    }
  }
  switch (msg.TAG) {
    case "Set" :
        var n = msg._0;
        if (n !== undefined) {
          return [
                  {
                    count: n,
                    title: model.title
                  },
                  "NoOp"
                ];
        } else {
          return [
                  model,
                  "NoOp"
                ];
        }
    case "SetAfterDelay" :
        return [
                model,
                {
                  TAG: "Delay",
                  _0: {
                    ms: msg._0,
                    msg: {
                      TAG: "Set",
                      _0: msg._1
                    }
                  }
                }
              ];
    case "SetLogCount" :
        var n$1 = msg._0;
        return [
                {
                  count: n$1,
                  title: model.title
                },
                {
                  TAG: "Log",
                  _0: "Setting count to " + String(n$1)
                }
              ];
    case "Response" :
        return [
                {
                  count: model.count,
                  title: msg._0
                },
                "NoOp"
              ];
    case "SaveCount" :
        return [
                model,
                {
                  TAG: "StorageSet",
                  _0: {
                    key: "count",
                    value: String(msg._0)
                  }
                }
              ];
    case "SendWebSocketData" :
        return [
                model,
                {
                  TAG: "WebSocket",
                  _0: {
                    url: "wss://echo.websocket.org",
                    data: msg._0
                  }
                }
              ];
    
  }
}

async function run(cmd, dispatch) {
  if (typeof cmd !== "object") {
    return ;
  }
  switch (cmd.TAG) {
    case "Batch" :
        return await Cmd.Batch.run(cmd._0, dispatch, run);
    case "Delay" :
        return await Cmd.Delay.run(cmd._0, dispatch);
    case "Http" :
        return await Cmd.Http.run(cmd._0, dispatch);
    case "Log" :
        return await Cmd.Log.run(cmd._0);
    case "StorageSet" :
        return await Cmd.$$Storage.$$Set.run(cmd._0, dispatch);
    case "StorageGet" :
        return await Cmd.$$Storage.Get.run(cmd._0, dispatch);
    case "WebSocket" :
        return await Cmd.$$WebSocket.run(cmd._0, dispatch);
    
  }
}

function subs(_model) {
  return [Sub.$$WebSocket.listen("wss://echo.websocket.org", (function (s) {
                  return {
                          TAG: "Response",
                          _0: "WS Message: " + s
                        };
                }))];
}

function Counter(props) {
  var __count = props.count;
  var count = __count !== undefined ? __count : 0;
  var match = Chai.useKettle({
        update: update,
        run: run,
        init: [
          {
            count: count,
            title: "Counter Component"
          },
          {
            TAG: "Batch",
            _0: [
              {
                TAG: "Log",
                _0: "Counter initialized"
              },
              {
                TAG: "Delay",
                _0: {
                  ms: 1000,
                  msg: {
                    TAG: "Set",
                    _0: -5
                  }
                }
              },
              {
                TAG: "Http",
                _0: {
                  url: "/api/test",
                  req: {
                    method: "GET"
                  },
                  cons: (async function (r) {
                      return {
                              TAG: "Response",
                              _0: await r.text()
                            };
                    })
                }
              }
            ]
          }
        ],
        subscriptions: subs
      });
  var dispatch = match[1];
  var model = match[0];
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("h2", {
                      children: model.title
                    }),
                JsxRuntime.jsx("p", {
                      children: "Count: " + String(model.count)
                    }),
                JsxRuntime.jsx("button", {
                      children: "Increment",
                      onClick: (function (param) {
                          dispatch("Increment");
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Set to 12 after 1 second",
                      onClick: (function (param) {
                          dispatch({
                                TAG: "SetAfterDelay",
                                _0: 1000,
                                _1: 12
                              });
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Set count to 10 and log",
                      onClick: (function (param) {
                          dispatch({
                                TAG: "SetLogCount",
                                _0: 10
                              });
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Save count to storage",
                      onClick: (function (param) {
                          dispatch({
                                TAG: "SaveCount",
                                _0: model.count
                              });
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Load count from storage",
                      onClick: (function (param) {
                          dispatch("LoadCount");
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "Send WebSocket Message",
                      onClick: (function (param) {
                          dispatch({
                                TAG: "SendWebSocketData",
                                _0: "Boop"
                              });
                        })
                    })
              ]
            });
}

var make = Counter;

var $$default = Counter;

export {
  update ,
  run ,
  subs ,
  make ,
  $$default as default,
}
/* Chai Not a pure module */
