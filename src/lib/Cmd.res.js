// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Connection from "./utils/Connection.res.js";
import * as Dom_storage from "rescript/lib/es6/dom_storage.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

async function run(cmds, dispatch, runner) {
  var promises = cmds.map(function (c) {
        return runner(c, dispatch);
      });
  await Promise.all(promises);
}

var Batch = {
  run: run
};

async function run$1(cmd, dispatch) {
  setTimeout((function () {
          dispatch(cmd.msg);
        }), cmd.ms);
}

var Delay = {
  run: run$1
};

async function run$2(cmd) {
  console.log(cmd);
}

var Log = {
  run: run$2
};

async function run$3(cmd, dispatch) {
  var response = await fetch(cmd.url, cmd.req);
  var msg = await cmd.cons(response);
  return dispatch(msg);
}

var Http = {
  run: run$3
};

async function run$4(cmd, dispatch) {
  var result;
  try {
    result = Dom_storage.getItem(cmd.key, localStorage);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      result = undefined;
    } else {
      throw exn;
    }
  }
  var msg = cmd.cons(result);
  return dispatch(msg);
}

var Get = {
  run: run$4
};

async function run$5(_cmd, _dispatch) {
  try {
    return Dom_storage.setItem(_cmd.key, _cmd.value, localStorage);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

var $$Set = {
  run: run$5
};

async function run$6(_cmd, _dispatch) {
  try {
    return Dom_storage.removeItem(_cmd.key, localStorage);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

var Remove = {
  run: run$6
};

async function run$7(_cmd, _dispatch) {
  try {
    localStorage.clear();
    return ;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

var Clear = {
  run: run$7
};

var $$Storage = {
  Get: Get,
  $$Set: $$Set,
  Remove: Remove,
  Clear: Clear
};

async function run$8(cmd, _dispatch) {
  var conn = Connection.Manager.getOrCreateConnection(cmd.url);
  var onOpen = function () {
    var jsonString = JSON.stringify(cmd.data);
    conn.ws.send(jsonString);
  };
  if (conn.isConnected) {
    var jsonString = JSON.stringify(cmd.data);
    conn.ws.send(jsonString);
    return ;
  }
  addEventListener(conn.ws, "open", onOpen);
}

var $$WebSocket = {
  run: run$8
};

export {
  Batch ,
  Delay ,
  Log ,
  Http ,
  $$Storage ,
  $$WebSocket ,
}
/* No side effect */
