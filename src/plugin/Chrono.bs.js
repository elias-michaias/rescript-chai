// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function create(initialModel, setSnapshot) {
  var history = {
    contents: [initialModel]
  };
  var index = {
    contents: 0
  };
  var push = function (m) {
    if (index.contents < (history.contents.length - 1 | 0)) {
      history.contents = Belt_Array.slice(history.contents, 0, index.contents + 1 | 0);
    }
    history.contents = Belt_Array.concat(history.contents, [m]);
    index.contents = history.contents.length - 1 | 0;
  };
  var getSnapshot = function (idx) {
    if (idx < 0 || idx >= history.contents.length) {
      return ;
    } else {
      return Belt_Array.get(history.contents, idx);
    }
  };
  var undo = function () {
    if (index.contents <= 0) {
      return ;
    }
    index.contents = index.contents - 1 | 0;
    var s = getSnapshot(index.contents);
    if (s !== undefined) {
      return setSnapshot(Caml_option.valFromOption(s));
    }
    
  };
  var redo = function () {
    if (index.contents >= (history.contents.length - 1 | 0)) {
      return ;
    }
    index.contents = index.contents + 1 | 0;
    var s = getSnapshot(index.contents);
    if (s !== undefined) {
      return setSnapshot(Caml_option.valFromOption(s));
    }
    
  };
  var $$goto = function (idx) {
    if (idx < 0 || idx >= history.contents.length) {
      return ;
    }
    index.contents = idx;
    var s = getSnapshot(idx);
    if (s !== undefined) {
      return setSnapshot(Caml_option.valFromOption(s));
    }
    
  };
  var clear = function () {
    history.contents = [initialModel];
    index.contents = 0;
  };
  var reset = function () {
    setSnapshot(initialModel);
  };
  return {
          history: history,
          index: index,
          push: push,
          undo: undo,
          redo: redo,
          goto: $$goto,
          clear: clear,
          reset: reset,
          getSnapshot: getSnapshot
        };
}

function noop(_initialModel, _setSnapshot) {
  var history = {
    contents: []
  };
  var index = {
    contents: -1
  };
  var push = function (_m) {
    
  };
  var undo = function () {
    
  };
  var redo = function () {
    
  };
  var $$goto = function (_idx) {
    
  };
  var clear = function () {
    history.contents = [];
    index.contents = -1;
  };
  var reset = function () {
    
  };
  var getSnapshot = function (_idx) {
    
  };
  return {
          history: history,
          index: index,
          push: push,
          undo: undo,
          redo: redo,
          goto: $$goto,
          clear: clear,
          reset: reset,
          getSnapshot: getSnapshot
        };
}

function createProjected(initialModel, filter, setProjected) {
  var initialSnap = filter(initialModel);
  return create(initialSnap, setProjected);
}

function noopProjected(_initialModel, _filter, _setProjected) {
  var history = {
    contents: []
  };
  var index = {
    contents: -1
  };
  var push = function (_m) {
    
  };
  var undo = function () {
    
  };
  var redo = function () {
    
  };
  var $$goto = function (_idx) {
    
  };
  var clear = function () {
    history.contents = [];
    index.contents = -1;
  };
  var reset = function () {
    
  };
  var getSnapshot = function (_idx) {
    
  };
  return {
          history: history,
          index: index,
          push: push,
          undo: undo,
          redo: redo,
          goto: $$goto,
          clear: clear,
          reset: reset,
          getSnapshot: getSnapshot
        };
}

export {
  create ,
  noop ,
  createProjected ,
  noopProjected ,
}
/* No side effect */
