// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Plugin from "../Plugin.bs.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function create(initialModel, setSnapshot) {
  var history = {
    contents: [initialModel]
  };
  var index = {
    contents: 0
  };
  var push = function (m) {
    if (index.contents < (history.contents.length - 1 | 0)) {
      history.contents = Belt_Array.slice(history.contents, 0, index.contents + 1 | 0);
    }
    history.contents = Belt_Array.concat(history.contents, [m]);
    index.contents = history.contents.length - 1 | 0;
  };
  var getSnapshot = function (idx) {
    if (idx < 0 || idx >= history.contents.length) {
      return ;
    } else {
      return Belt_Array.get(history.contents, idx);
    }
  };
  var undo = function () {
    if (index.contents <= 0) {
      return ;
    }
    index.contents = index.contents - 1 | 0;
    var s = getSnapshot(index.contents);
    if (s !== undefined) {
      return setSnapshot(Caml_option.valFromOption(s));
    }
    
  };
  var redo = function () {
    if (index.contents >= (history.contents.length - 1 | 0)) {
      return ;
    }
    index.contents = index.contents + 1 | 0;
    var s = getSnapshot(index.contents);
    if (s !== undefined) {
      return setSnapshot(Caml_option.valFromOption(s));
    }
    
  };
  var $$goto = function (idx) {
    if (idx < 0 || idx >= history.contents.length) {
      return ;
    }
    index.contents = idx;
    var s = getSnapshot(idx);
    if (s !== undefined) {
      return setSnapshot(Caml_option.valFromOption(s));
    }
    
  };
  var clear = function () {
    history.contents = [initialModel];
    index.contents = 0;
  };
  var reset = function () {
    setSnapshot(initialModel);
  };
  return {
          history: history,
          index: index,
          push: push,
          undo: undo,
          redo: redo,
          goto: $$goto,
          clear: clear,
          reset: reset,
          getSnapshot: getSnapshot
        };
}

function createProjected(initialModel, filter, setProjected) {
  var initialSnap = filter(initialModel);
  return create(initialSnap, setProjected);
}

function plugin(innerInit, opts) {
  return function (set, get, api) {
    var base = innerInit(set, get, api);
    var initial = base.state;
    var setSnapshot = function (m) {
      set(function (curr) {
            return {
                    state: m,
                    dispatch: curr.dispatch,
                    command: curr.command,
                    plugins: curr.plugins
                  };
          });
    };
    var suppressPush = {
      contents: false
    };
    var makeProjected = function (filter, apply) {
      var setProjected = function (snap) {
        var parentNow = get().state;
        var updated = apply(snap)(parentNow);
        suppressPush.contents = true;
        setSnapshot(updated);
        suppressPush.contents = false;
      };
      return createProjected(initial, filter, setProjected);
    };
    var match = opts.filter;
    var match$1 = opts.apply;
    var baseChrono;
    var exit = 0;
    if (match !== undefined && match$1 !== undefined) {
      var c = makeProjected(match, match$1);
      api.subscribe(function (st) {
            if (suppressPush.contents) {
              return ;
            } else {
              return c.push(match(st.state));
            }
          });
      baseChrono = c;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      var c$1 = create(initial, (function (s) {
              suppressPush.contents = true;
              setSnapshot(s);
              suppressPush.contents = false;
            }));
      api.subscribe(function (st) {
            if (suppressPush.contents) {
              return ;
            } else {
              return c$1.push(st.state);
            }
          });
      baseChrono = c$1;
    }
    var max = opts.max;
    var chronoWithMax;
    if (max !== undefined) {
      var origPush = baseChrono.push;
      var wrappedPush = function (m) {
        origPush(m);
        var len = baseChrono.history.contents.length;
        var keep = max + 1 | 0;
        if (len > keep) {
          baseChrono.history.contents = Belt_Array.slice(baseChrono.history.contents, len - keep | 0, keep);
          baseChrono.index.contents = baseChrono.history.contents.length - 1 | 0;
          return ;
        }
        
      };
      chronoWithMax = {
        history: baseChrono.history,
        index: baseChrono.index,
        push: wrappedPush,
        undo: baseChrono.undo,
        redo: baseChrono.redo,
        goto: baseChrono.goto,
        clear: baseChrono.clear,
        reset: baseChrono.reset,
        getSnapshot: baseChrono.getSnapshot
      };
    } else {
      chronoWithMax = baseChrono;
    }
    var d = {};
    Js_dict.entries(base.plugins).forEach(function (param) {
          d[param[0]] = param[1];
        });
    d["chrono"] = chronoWithMax;
    var mergeWithPlugins = ((function(base, plugins){ var o = Object.assign({}, base); o.plugins = plugins; return o }));
    return mergeWithPlugins(base, d);
  };
}

function get(store) {
  return $$Plugin.getPluginFromRawStore(store, "chrono");
}

export {
  create ,
  createProjected ,
  plugin ,
  get ,
}
/* No side effect */
