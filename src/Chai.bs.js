// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as $$Plugin from "./Plugin.bs.js";
import * as Helpers from "./utils/Helpers.bs.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Zustand from "zustand";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Tracked_ from "./bindings/Tracked_.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Middleware from "zustand/middleware";

function track(useInstance) {
  var useTrackedInstance = function (init) {
    var triple = init !== undefined ? useInstance(init) : useInstance(undefined);
    var rawStore = triple[2];
    var dispatch = triple[1];
    var useStateFromStore = function (selector) {
      return Zustand.useStore(rawStore, (function (storeState) {
                    return selector(storeState.state);
                  }));
    };
    var useTracked = Tracked_.createTrackedSelector(useStateFromStore);
    var state = useTracked();
    if (init !== undefined) {
      React.useEffect((function () {
              dispatch(init());
            }), []);
    }
    return [
            state,
            dispatch,
            rawStore
          ];
  };
  Helpers.attachRawUse(useTrackedInstance, useInstance);
  return useTrackedInstance;
}

function brew(config) {
  var storeRef = {
    contents: undefined
  };
  var ensureStore = function () {
    var s = storeRef.contents;
    if (s !== undefined) {
      return Caml_option.valFromOption(s);
    }
    var match = config.init;
    var initialCmd = match[1];
    var initialModel = match[0];
    var initializer = function (set, _get, _api) {
      var pluginsDict = {};
      return {
              state: initialModel,
              dispatch: (function (action) {
                  var updater = function (current) {
                    var match = config.update(current.state, action);
                    return {
                            state: match[0],
                            dispatch: current.dispatch,
                            command: match[1],
                            plugins: current.plugins
                          };
                  };
                  set(function (curr) {
                        var next = updater(curr);
                        Js_dict.entries(next.plugins).forEach(function (param) {
                              $$Plugin.callOnSet(param[1], next.state);
                            });
                        return next;
                      });
                }),
              command: initialCmd,
              plugins: pluginsDict
            };
    };
    var ext = config.middleware;
    var enhancedInit = ext !== undefined ? ext(initializer) : initializer;
    var pExt = config.plugins;
    var enhancedInit$1 = pExt !== undefined ? pExt(enhancedInit) : enhancedInit;
    var s$1 = Zustand.create(enhancedInit$1);
    var runFn = config.run;
    if (runFn !== undefined) {
      var state0 = s$1.getState();
      var prevCmdRef = {
        contents: state0.command
      };
      runFn(state0.command, state0.dispatch);
      s$1.subscribe(function (st) {
            if (Caml_obj.notequal(st.command, prevCmdRef.contents)) {
              prevCmdRef.contents = st.command;
              runFn(st.command, st.dispatch);
              return ;
            }
            
          });
    }
    var subsFn = config.subs;
    if (subsFn !== undefined) {
      var getModel = function () {
        return s$1.getState().state;
      };
      var prevMapRef = {
        contents: {}
      };
      var syncForModel = function (model, dispatch) {
        var nextRaw = subsFn(model);
        var next = Belt_Array.keepMap(nextRaw, (function (x) {
                return x;
              }));
        var nextMap = {};
        next.forEach(function (sub) {
              var key = sub.key(model);
              var oldCleanup = Js_dict.get(prevMapRef.contents, key);
              if (oldCleanup !== undefined) {
                nextMap[key] = oldCleanup;
                return ;
              }
              var startCancel = function (mArg) {
                var raw = subsFn(mArg);
                var nextList = Belt_Array.keepMap(raw, (function (x) {
                        return x;
                      }));
                return !nextList.some(function (s) {
                            return s.key(mArg) === key;
                          });
              };
              var cleanup = sub.start(dispatch, getModel, startCancel);
              nextMap[key] = cleanup;
            });
        Js_dict.entries(prevMapRef.contents).forEach(function (param) {
              var match = Js_dict.get(nextMap, param[0]);
              if (match !== undefined) {
                return ;
              } else {
                return param[1]();
              }
            });
        prevMapRef.contents = nextMap;
      };
      var stateNow = s$1.getState();
      syncForModel(stateNow.state, stateNow.dispatch);
      s$1.subscribe(function (st) {
            syncForModel(st.state, st.dispatch);
          });
    }
    storeRef.contents = Caml_option.some(s$1);
    return s$1;
  };
  var rawUseInstance = function (init) {
    var s = ensureStore();
    var stNow = Helpers.rawToTypedState(s);
    Js_dict.entries(stNow.plugins).forEach(function (param) {
          $$Plugin.callOnUse(param[1]);
        });
    var rawDispatch = Zustand.useStore(s, (function (st) {
            return st.dispatch;
          }));
    var dispatch = function (msg) {
      var current = Helpers.rawToTypedState(s);
      Helpers.notifyPluginsOnDispatch(current.plugins, msg);
      rawDispatch(msg);
    };
    return [
            s,
            dispatch,
            s
          ];
  };
  return track(rawUseInstance);
}

function pour(useInstanceHook, opts) {
  return function (init) {
    var rawHookOpt = Helpers.getRawUse(useInstanceHook);
    var match;
    if (rawHookOpt !== undefined) {
      var match$1 = rawHookOpt(undefined);
      match = [
        match$1[0],
        match$1[1],
        match$1[2]
      ];
    } else {
      var match$2 = useInstanceHook(undefined);
      match = [
        undefined,
        match$2[1],
        match$2[2]
      ];
    }
    var rawStore = match[2];
    var parentDispatch = match[1];
    var lastRawRef = React.useRef(undefined);
    var filteredRef = React.useRef(undefined);
    var filtered = Helpers.getOrCreateFilteredStore(lastRawRef, filteredRef, rawStore, opts.filter, opts.infuse);
    var useStateFromFiltered = function (selector) {
      return Zustand.useStore(filtered, (function (storeState) {
                    return selector(storeState.state);
                  }));
    };
    var useTracked = Tracked_.createTrackedSelector(useStateFromFiltered);
    var state = useTracked();
    var dispatch = function (subMsg) {
      parentDispatch(opts.infuse(subMsg));
    };
    if (init !== undefined) {
      React.useEffect((function () {
              parentDispatch(opts.infuse(init()));
            }), []);
    }
    return [
            state,
            dispatch,
            rawStore
          ];
  };
}

function persist(prim0, prim1) {
  return Middleware.persist(prim0, prim1);
}

function devtools(prim0, prim1) {
  return Middleware.devtools(prim0, prim1);
}

export {
  track ,
  brew ,
  pour ,
  persist ,
  devtools ,
}
/* react Not a pure module */
