// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Zustand from "zustand";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Middleware from "zustand/middleware";

function select(store, selector) {
  return Zustand.useStore(store, (function (storeState) {
                return selector(storeState.state);
              }));
}

function makeFilteredStore(origStore, filterOpt, infuseOpt) {
  var getState = function () {
    var s = origStore.getState();
    var statePart = filterOpt !== undefined ? filterOpt(s.state) : s.state;
    var dispatchPart = infuseOpt !== undefined ? (function (subMsg) {
          s.dispatch(infuseOpt(subMsg));
        }) : (function (subMsg) {
          s.dispatch(subMsg);
        });
    return {
            state: statePart,
            dispatch: dispatchPart,
            command: s.command
          };
  };
  var subscribe = function (listener) {
    return origStore.subscribe(function (s) {
                var statePart = filterOpt !== undefined ? filterOpt(s.state) : s.state;
                var dispatchPart = infuseOpt !== undefined ? (function (subMsg) {
                      s.dispatch(infuseOpt(subMsg));
                    }) : (function (subMsg) {
                      s.dispatch(subMsg);
                    });
                listener({
                      state: statePart,
                      dispatch: dispatchPart,
                      command: s.command
                    });
              });
  };
  return {
          getState: getState,
          subscribe: subscribe
        };
}

function brew(config) {
  var storeRef = {
    contents: undefined
  };
  var ensureStore = function () {
    var s = storeRef.contents;
    if (s !== undefined) {
      return Caml_option.valFromOption(s);
    }
    var match = config.init;
    var initialCmd = match[1];
    var initialModel = match[0];
    var initializer = function (set, _get, _api) {
      return {
              state: initialModel,
              dispatch: (function (action) {
                  set(function (current) {
                        var match = config.update(current.state, action);
                        return {
                                state: match[0],
                                dispatch: current.dispatch,
                                command: match[1]
                              };
                      });
                }),
              command: initialCmd
            };
    };
    var ext = config.middleware;
    var enhancedInit = ext !== undefined ? ext(initializer) : initializer;
    var s$1 = Zustand.create(enhancedInit);
    var runFn = config.run;
    if (runFn !== undefined) {
      var state0 = s$1.getState();
      var prevCmdRef = {
        contents: state0.command
      };
      runFn(state0.command, state0.dispatch);
      s$1.subscribe(function (st) {
            if (Caml_obj.notequal(st.command, prevCmdRef.contents)) {
              prevCmdRef.contents = st.command;
              runFn(st.command, st.dispatch);
              return ;
            }
            
          });
    }
    var subsFn = config.subs;
    if (subsFn !== undefined) {
      var getModel = function () {
        return s$1.getState().state;
      };
      var prevMapRef = {
        contents: {}
      };
      var syncForModel = function (model, dispatch) {
        var nextRaw = subsFn(model);
        var next = Belt_Array.keepMap(nextRaw, (function (x) {
                return x;
              }));
        var nextMap = {};
        next.forEach(function (sub) {
              var key = sub.key(model);
              var oldCleanup = Js_dict.get(prevMapRef.contents, key);
              if (oldCleanup !== undefined) {
                nextMap[key] = oldCleanup;
                return ;
              }
              var startCancel = function (mArg) {
                var raw = subsFn(mArg);
                var nextList = Belt_Array.keepMap(raw, (function (x) {
                        return x;
                      }));
                return !nextList.some(function (s) {
                            return s.key(mArg) === key;
                          });
              };
              var cleanup = sub.start(dispatch, getModel, startCancel);
              nextMap[key] = cleanup;
            });
        Js_dict.entries(prevMapRef.contents).forEach(function (param) {
              var match = Js_dict.get(nextMap, param[0]);
              if (match !== undefined) {
                return ;
              } else {
                return param[1]();
              }
            });
        prevMapRef.contents = nextMap;
      };
      var stateNow = s$1.getState();
      syncForModel(stateNow.state, stateNow.dispatch);
      s$1.subscribe(function (st) {
            syncForModel(st.state, st.dispatch);
          });
    }
    storeRef.contents = Caml_option.some(s$1);
    return s$1;
  };
  return function () {
    var store = ensureStore();
    var dispatch = Zustand.useStore(store, (function (st) {
            return st.dispatch;
          }));
    return [
            store,
            dispatch
          ];
  };
}

function pour(useInstanceHook, opts) {
  return function () {
    var match = useInstanceHook();
    var dispatch = match[1];
    var filtered = makeFilteredStore(match[0], opts.filter, opts.infuse);
    var wrappedDispatch = function (subMsg) {
      dispatch(opts.infuse(subMsg));
    };
    return [
            filtered,
            wrappedDispatch
          ];
  };
}

function persist(prim0, prim1) {
  return Middleware.persist(prim0, prim1);
}

function devtools(prim0, prim1) {
  return Middleware.devtools(prim0, prim1);
}

export {
  select ,
  makeFilteredStore ,
  brew ,
  pour ,
  persist ,
  devtools ,
}
/* zustand Not a pure module */
