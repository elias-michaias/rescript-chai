// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";

var connections = {};

function getConnection(url) {
  return Js_dict.get(connections, url);
}

function setConnection(url, conn) {
  connections[url] = conn;
}

function removeConnection(_url) {
  
}

function createConnection(url) {
  var ws = new WebSocket(url);
  var conn = {
    ws: ws,
    isConnected: false,
    subscribers: [],
    outgoingQueue: []
  };
  var onOpen = function () {
    conn.isConnected = true;
    for(var i = 0 ,i_finish = conn.outgoingQueue.length; i < i_finish; ++i){
      var data = conn.outgoingQueue[i];
      var jsonString = JSON.stringify(data);
      conn.ws.send(jsonString);
    }
    conn.outgoingQueue = [];
  };
  var onClose = function () {
    conn.isConnected = false;
  };
  var onError = function () {
    conn.isConnected = false;
  };
  ws.onopen = onOpen;
  ws.onmessage = (function ($$event) {
      var data = $$event.data;
      for(var i = 0 ,i_finish = conn.subscribers.length; i < i_finish; ++i){
        var fn = conn.subscribers[i];
        fn(data);
      }
    });
  ws.onclose = onClose;
  ws.onerror = onError;
  setConnection(url, conn);
  return conn;
}

function getOrCreateConnection(url) {
  var conn = Js_dict.get(connections, url);
  if (conn !== undefined && conn.isConnected) {
    return conn;
  } else {
    return createConnection(url);
  }
}

var defaultSendOptions = {
  stringify: true
};

var defaultListenOptions = {
  parser: (function (s) {
      return s;
    })
};

function send(url, data, stringify) {
  var opts = stringify !== undefined ? ({
        stringify: stringify
      }) : defaultSendOptions;
  var conn = getOrCreateConnection(url);
  if (!conn.isConnected) {
    conn.outgoingQueue = conn.outgoingQueue.concat(Core__Array.make(1, data));
    return ;
  }
  var toSend = opts.stringify ? JSON.stringify(data) : data;
  conn.ws.send(toSend);
}

function addListener(url, fn, opts) {
  var opts$1 = opts !== undefined ? opts : defaultListenOptions;
  var conn = getOrCreateConnection(url);
  var wrapped = function (raw) {
    var parsed = opts$1.parser(raw);
    if (parsed !== undefined) {
      return fn(parsed);
    }
    
  };
  conn.subscribers = conn.subscribers.concat(Core__Array.make(1, wrapped));
  return function () {
    var idx = conn.subscribers.length - 1 | 0;
    if (idx >= 0) {
      conn.subscribers = conn.subscribers.slice(0, idx);
      return ;
    }
    
  };
}

var Manager = {
  connections: connections,
  getConnection: getConnection,
  setConnection: setConnection,
  removeConnection: removeConnection,
  createConnection: createConnection,
  getOrCreateConnection: getOrCreateConnection,
  defaultSendOptions: defaultSendOptions,
  defaultListenOptions: defaultListenOptions,
  send: send,
  addListener: addListener
};

export {
  Manager ,
}
/* No side effect */
