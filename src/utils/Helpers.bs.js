// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core from "../Core.bs.js";
import * as $$Plugin from "../Plugin.bs.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function rawToTypedState(raw) {
  return raw.getState();
}

function attachRawUse(trackedHook, rawUse) {
  trackedHook["rawUse"] = rawUse;
}

function getRawUse(hook) {
  var r = Js_dict.get(hook, "rawUse");
  if (r !== undefined) {
    return Caml_option.valFromOption(r);
  }
  
}

function notifyPluginsOnSet(plugins, state) {
  Js_dict.entries(plugins).forEach(function (param) {
        $$Plugin.callOnSet(param[1], state);
      });
}

function notifyPluginsOnDispatch(plugins, msg) {
  Js_dict.entries(plugins).forEach(function (param) {
        $$Plugin.callOnDispatch(param[1], msg);
      });
}

function getOrCreateFilteredStore(lastRawRef, filteredRef, rawStore, filter, infuse) {
  var r = lastRawRef.current;
  if (r !== undefined && Caml_obj.equal(Caml_option.valFromOption(r), rawStore)) {
    var f = filteredRef.current;
    if (f !== undefined) {
      return Caml_option.valFromOption(f);
    }
    var f$1 = Core.makeFilteredStore(rawStore, filter, infuse);
    filteredRef.current = Caml_option.some(f$1);
    return f$1;
  }
  var f$2 = Core.makeFilteredStore(rawStore, filter, infuse);
  lastRawRef.current = Caml_option.some(rawStore);
  filteredRef.current = Caml_option.some(f$2);
  return f$2;
}

export {
  rawToTypedState ,
  attachRawUse ,
  getRawUse ,
  notifyPluginsOnSet ,
  notifyPluginsOnDispatch ,
  getOrCreateFilteredStore ,
}
/* Core Not a pure module */
