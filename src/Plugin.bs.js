// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function getPlugin(rawStore, name) {
  var s = rawStore.getState();
  var p = Js_dict.get(s.plugins, name);
  if (p !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(p));
  }
  
}

function createPluginWrapper(name, makePlugin) {
  return function (innerInit) {
    return function (set, get, api) {
      var base = innerInit(set, get, api);
      var initialModel = base.state;
      var setSnapshot = function (m) {
        set(function (curr) {
              return {
                      state: m,
                      dispatch: curr.dispatch,
                      command: curr.command,
                      plugins: curr.plugins
                    };
            });
      };
      var ctx_subscribe = api.subscribe;
      var ctx = {
        initialModel: initialModel,
        setSnapshot: setSnapshot,
        getState: get,
        setRaw: set,
        subscribe: ctx_subscribe
      };
      var pluginInst = makePlugin(ctx);
      var d = {};
      Js_dict.entries(base.plugins).forEach(function (param) {
            d[param[0]] = param[1];
          });
      d[name] = pluginInst;
      var mergeWithPlugins = ((function(base, plugins){ var o = Object.assign({}, base); o.plugins = plugins; return o }));
      return mergeWithPlugins(base, d);
    };
  };
}

function getPluginFromState(st, name) {
  var p = Js_dict.get(st.plugins, name);
  if (p !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(p));
  }
  
}

function getPluginFromRawStore(rawStore, name) {
  var s = rawStore.getState();
  return getPluginFromState(s, name);
}

function toPlugin(v) {
  return v;
}

export {
  getPlugin ,
  createPluginWrapper ,
  getPluginFromState ,
  getPluginFromRawStore ,
  toPlugin ,
}
/* No side effect */
