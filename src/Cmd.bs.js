// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Connection from "./utils/Connection.bs.js";
import * as IndexedDB_ from "./bindings/IndexedDB_.bs.js";
import * as Dom_storage from "rescript/lib/es6/dom_storage.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

async function run(cmds, dispatch, runner) {
  var promises = cmds.map(function (c) {
        return runner(c, dispatch);
      });
  await Promise.all(promises);
}

var Batch = {
  run: run
};

async function run$1(cmd, dispatch) {
  setTimeout((function () {
          dispatch(cmd.msg);
        }), cmd.ms);
}

var Delay = {
  run: run$1
};

async function run$2(cmd, dispatch) {
  dispatch(cmd.cons(Date.now()));
}

var Now = {
  run: run$2
};

var Time = {
  Delay: Delay,
  Now: Now
};

async function run$3(cmd) {
  console.log(cmd);
}

var Log = {
  run: run$3
};

async function run$4(cmd, dispatch) {
  var response = await fetch(cmd.url, cmd.req);
  var msg = await cmd.cons(response);
  return dispatch(msg);
}

var Req = {
  run: run$4
};

async function run$5(cmd, dispatch) {
  var response = await fetch(cmd.url, cmd.req);
  var body = await response.json();
  var msg = await cmd.cons(body);
  return dispatch(msg);
}

var Json = {
  run: run$5
};

var Http = {
  Req: Req,
  Json: Json
};

async function run$6(cmd, dispatch) {
  var result;
  try {
    result = Dom_storage.getItem(cmd.key, localStorage);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      result = undefined;
    } else {
      throw exn;
    }
  }
  var msg = cmd.cons(result);
  return dispatch(msg);
}

var Get = {
  run: run$6
};

async function run$7(_cmd, _dispatch) {
  try {
    return Dom_storage.setItem(_cmd.key, _cmd.value, localStorage);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

var $$Set = {
  run: run$7
};

async function run$8(_cmd, _dispatch) {
  try {
    return Dom_storage.removeItem(_cmd.key, localStorage);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

var Remove = {
  run: run$8
};

async function run$9(_cmd, _dispatch) {
  try {
    localStorage.clear();
    return ;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Js_exn.$$Error) {
      return ;
    }
    throw exn;
  }
}

var Clear = {
  run: run$9
};

var LocalStorage = {
  Get: Get,
  $$Set: $$Set,
  Remove: Remove,
  Clear: Clear
};

async function run$10(cmd, dispatch) {
  try {
    var openRequest = indexedDB.open(cmd.db, 1);
    openRequest.onupgradeneeded = (function ($$event) {
        var db = $$event.target.result;
        if (!IndexedDB_.contains(db.objectStoreNames, "keyvalue")) {
          db.createObjectStore(cmd.store);
          return ;
        }
        
      });
    var db = await new Promise((function (resolve, reject) {
            openRequest.onsuccess = (function ($$event) {
                resolve($$event.target.result);
              });
            openRequest.onerror = (function ($$event) {
                reject($$event.target.error);
              });
          }));
    var transaction = db.transaction(cmd.store, "readonly");
    var store = transaction.objectStore(cmd.store);
    var getRequest = store.get(cmd.key);
    var value = await new Promise((function (resolve, reject) {
            getRequest.onsuccess = (function ($$event) {
                resolve($$event.target.result);
              });
            getRequest.onerror = (function ($$event) {
                reject($$event.target.error);
              });
          }));
    var msg = cmd.cons(value);
    return dispatch(msg);
  }
  catch (exn){
    var msg$1 = cmd.cons(undefined);
    return dispatch(msg$1);
  }
}

var Get$1 = {
  run: run$10
};

async function run$11(cmd, _dispatch) {
  try {
    var openRequest = indexedDB.open(cmd.db, 1);
    openRequest.onupgradeneeded = (function ($$event) {
        var db = $$event.target.result;
        if (!IndexedDB_.contains(db.objectStoreNames, cmd.store)) {
          db.createObjectStore(cmd.store);
          return ;
        }
        
      });
    var db = await new Promise((function (resolve, reject) {
            openRequest.onsuccess = (function ($$event) {
                resolve($$event.target.result);
              });
            openRequest.onerror = (function ($$event) {
                reject($$event.target.error);
              });
          }));
    var transaction = db.transaction(cmd.store, "readwrite");
    var store = transaction.objectStore(cmd.store);
    store.put(cmd.value, cmd.key);
    return await new Promise((function (resolve, reject) {
                  transaction.oncomplete = (function (_event) {
                      resolve();
                    });
                  transaction.onerror = (function ($$event) {
                      reject($$event.target.error);
                    });
                }));
  }
  catch (exn){
    return ;
  }
}

var $$Set$1 = {
  run: run$11
};

async function run$12(cmd, _dispatch) {
  try {
    var openRequest = indexedDB.open(cmd.db, 1);
    openRequest.onupgradeneeded = (function ($$event) {
        var db = $$event.target.result;
        if (!IndexedDB_.contains(db.objectStoreNames, cmd.store)) {
          db.createObjectStore(cmd.store);
          return ;
        }
        
      });
    var db = await new Promise((function (resolve, reject) {
            openRequest.onsuccess = (function ($$event) {
                resolve($$event.target.result);
              });
            openRequest.onerror = (function ($$event) {
                reject($$event.target.error);
              });
          }));
    var transaction = db.transaction(cmd.store, "readwrite");
    var store = transaction.objectStore(cmd.store);
    store.delete(cmd.key);
    return await new Promise((function (resolve, reject) {
                  transaction.oncomplete = (function (_event) {
                      resolve();
                    });
                  transaction.onerror = (function ($$event) {
                      reject($$event.target.error);
                    });
                }));
  }
  catch (exn){
    return ;
  }
}

var Remove$1 = {
  run: run$12
};

async function run$13(cmd, _dispatch) {
  try {
    var openRequest = indexedDB.open(cmd.db, 1);
    openRequest.onupgradeneeded = (function ($$event) {
        var db = $$event.target.result;
        if (!IndexedDB_.contains(db.objectStoreNames, cmd.store)) {
          db.createObjectStore(cmd.store);
          return ;
        }
        
      });
    var db = await new Promise((function (resolve, reject) {
            openRequest.onsuccess = (function ($$event) {
                resolve($$event.target.result);
              });
            openRequest.onerror = (function ($$event) {
                reject($$event.target.error);
              });
          }));
    var transaction = db.transaction(cmd.store, "readwrite");
    var store = transaction.objectStore(cmd.store);
    store.clear();
    return await new Promise((function (resolve, reject) {
                  transaction.oncomplete = (function (_event) {
                      resolve();
                    });
                  transaction.onerror = (function ($$event) {
                      reject($$event.target.error);
                    });
                }));
  }
  catch (exn){
    return ;
  }
}

var Clear$1 = {
  run: run$13
};

var IndexedDB = {
  Get: Get$1,
  $$Set: $$Set$1,
  Remove: Remove$1,
  Clear: Clear$1
};

async function run$14(cmd, _dispatch) {
  var match = cmd.stringify;
  if (match !== undefined && match) {
    return Connection.Manager.send(cmd.url, cmd.data, true);
  }
  return Connection.Manager.send(cmd.url, cmd.data, false);
}

var $$WebSocket = {
  run: run$14
};

async function run$15(cmds, runner, dispatch) {
  var len = cmds.length;
  var _loop = async function (i) {
    if (i < len) {
      await runner(cmds[i], dispatch);
      await _loop(i + 1 | 0);
    }
    return await _loop(0);
  };
}

var Sequence = {
  run: run$15
};

export {
  Batch ,
  Time ,
  Log ,
  Http ,
  LocalStorage ,
  IndexedDB ,
  $$WebSocket ,
  Sequence ,
}
/* No side effect */
