// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Zustand from "zustand";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function select(store, selector) {
  return Zustand.useStore(store, (function (storeState) {
                return selector(storeState.state);
              }));
}

function makeFilteredStore(origRawStore, filterOpt, infuseOpt) {
  var getState = function () {
    var s = origRawStore.getState();
    var statePart = filterOpt(s.state);
    var dispatchPart = function (subMsg) {
      s.dispatch(infuseOpt(subMsg));
    };
    return {
            state: statePart,
            dispatch: dispatchPart,
            command: s.command,
            plugins: s.plugins
          };
  };
  var subscribe = function (listener) {
    var lastRef = {
      contents: undefined
    };
    return origRawStore.subscribe(function (s) {
                var projected = filterOpt(s.state);
                var prev = lastRef.contents;
                var changed;
                if (prev !== undefined) {
                  var prev$1 = Caml_option.valFromOption(prev);
                  changed = prev$1 === projected ? false : !Caml_obj.equal(prev$1, projected);
                } else {
                  changed = true;
                }
                if (!changed) {
                  return ;
                }
                lastRef.contents = Caml_option.some(projected);
                var dispatchPart = function (subMsg) {
                  s.dispatch(infuseOpt(subMsg));
                };
                listener({
                      state: projected,
                      dispatch: dispatchPart,
                      command: s.command,
                      plugins: s.plugins
                    });
              });
  };
  return {
          getState: getState,
          subscribe: subscribe
        };
}

export {
  select ,
  makeFilteredStore ,
}
/* zustand Not a pure module */
