// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cmd from "rescript-chai/src/Cmd.bs.js";
import * as Sub from "rescript-chai/src/Sub.bs.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

function update(model, msg) {
  if (typeof msg !== "object") {
    switch (msg) {
      case "Increment" :
          return [
                  {
                    count: model.count + 1 | 0,
                    title: model.title,
                    person: model.person
                  },
                  "NoOp"
                ];
      case "LoadCount" :
          return [
                  model,
                  {
                    TAG: "LocalStorageGet",
                    _0: {
                      key: "count",
                      cons: (function (r) {
                          return {
                                  TAG: "Set",
                                  _0: Core__Option.map(r, Caml_format.int_of_string)
                                };
                        })
                    }
                  }
                ];
      case "LoadCountIDB" :
          return [
                  model,
                  {
                    TAG: "IndexedDBGet",
                    _0: {
                      db: "app",
                      store: "counter",
                      key: "count",
                      cons: (function (r) {
                          return {
                                  TAG: "Set",
                                  _0: Core__Option.map(r, Caml_format.int_of_string)
                                };
                        })
                    }
                  }
                ];
      
    }
  } else {
    switch (msg.TAG) {
      case "Set" :
          var n = msg._0;
          if (n !== undefined) {
            return [
                    {
                      count: n,
                      title: model.title,
                      person: model.person
                    },
                    "NoOp"
                  ];
          } else {
            return [
                    model,
                    "NoOp"
                  ];
          }
      case "SetAfterDelay" :
          return [
                  model,
                  {
                    TAG: "Delay",
                    _0: {
                      ms: msg._0,
                      msg: {
                        TAG: "Set",
                        _0: msg._1
                      }
                    }
                  }
                ];
      case "SetLogCount" :
          var n$1 = msg._0;
          return [
                  {
                    count: n$1,
                    title: model.title,
                    person: model.person
                  },
                  {
                    TAG: "Log",
                    _0: "Setting count to " + String(n$1)
                  }
                ];
      case "Response" :
          return [
                  {
                    count: model.count,
                    title: msg._0,
                    person: model.person
                  },
                  "NoOp"
                ];
      case "SaveCount" :
          return [
                  model,
                  {
                    TAG: "LocalStorageSet",
                    _0: {
                      key: "count",
                      value: String(msg._0)
                    }
                  }
                ];
      case "SaveCountIDB" :
          return [
                  model,
                  {
                    TAG: "IndexedDBSet",
                    _0: {
                      db: "app",
                      store: "counter",
                      key: "count",
                      value: String(msg._0)
                    }
                  }
                ];
      case "SendWebSocketData" :
          return [
                  model,
                  {
                    TAG: "WebSocket",
                    _0: {
                      url: "wss://echo.websocket.org",
                      data: msg._0
                    }
                  }
                ];
      case "PersonMsg" :
          var personMsg = msg._0;
          if (personMsg.TAG === "UpdateName") {
            var init = model.person;
            return [
                    {
                      count: model.count,
                      title: model.title,
                      person: {
                        name: personMsg._0,
                        age: init.age
                      }
                    },
                    "NoOp"
                  ];
          }
          var init$1 = model.person;
          return [
                  {
                    count: model.count,
                    title: model.title,
                    person: {
                      name: init$1.name,
                      age: personMsg._0
                    }
                  },
                  "NoOp"
                ];
      
    }
  }
}

async function run(cmd, dispatch) {
  if (typeof cmd !== "object") {
    return ;
  }
  switch (cmd.TAG) {
    case "Batch" :
        return await Cmd.Batch.run(cmd._0, dispatch, run);
    case "Log" :
        return await Cmd.Log.run(cmd._0);
    case "Delay" :
        return await Cmd.Time.Delay.run(cmd._0, dispatch);
    case "Http" :
        return await Cmd.Http.run(cmd._0, dispatch);
    case "LocalStorageSet" :
        return await Cmd.LocalStorage.$$Set.run(cmd._0, dispatch);
    case "LocalStorageGet" :
        return await Cmd.LocalStorage.Get.run(cmd._0, dispatch);
    case "IndexedDBSet" :
        return await Cmd.IndexedDB.$$Set.run(cmd._0, dispatch);
    case "IndexedDBGet" :
        return await Cmd.IndexedDB.Get.run(cmd._0, dispatch);
    case "WebSocket" :
        return await Cmd.$$WebSocket.run(cmd._0, dispatch);
    
  }
}

function subs(_model) {
  return [Sub.Time.every(5000, (function () {
                  return {
                          TAG: "Log",
                          _0: "5 seconds passed"
                        };
                }))];
}

function init(count) {
  return [
          {
            count: count,
            title: "Counter Component",
            person: {
              name: "Alice",
              age: 30
            }
          },
          {
            TAG: "Batch",
            _0: [
              {
                TAG: "Log",
                _0: "Counter initialized"
              },
              {
                TAG: "Delay",
                _0: {
                  ms: 1000,
                  msg: {
                    TAG: "Set",
                    _0: -5
                  }
                }
              },
              {
                TAG: "Http",
                _0: {
                  url: "https://httpbin.org/base64/SGVsbG8gV29ybGQ=",
                  req: {
                    method: "GET"
                  },
                  cons: (async function (r) {
                      return {
                              TAG: "Response",
                              _0: await r.text()
                            };
                    })
                }
              }
            ]
          }
        ];
}

export {
  update ,
  run ,
  subs ,
  init ,
}
/* No side effect */
